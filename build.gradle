/*
 * Created by Angel Leon (@gubatron), Alden Torres (aldenml)
 * Copyright (c) 2011-2015, FrostWire(R). All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import groovy.swing.SwingBuilder

apply plugin: 'com.android.application'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}

repositories {
    mavenCentral()
}

android {

    compileSdkVersion 15
    buildToolsVersion '22.0.1'

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            res.srcDirs = ['res', 'apollo/res']
            aidl.srcDirs = ['src', 'apollo/src']
            assets.srcDirs = ['assets']
            java {
                srcDir "../frostwire-common/apache"
                srcDir "../frostwire-common/core"
                srcDir "../frostwire-common/gson"
                srcDir "../frostwire-common/jdownloader"
                srcDir "../frostwire-common/mp4parser"
                srcDir "../frostwire-common/okhttp"

                srcDir 'apollo/src'
                srcDir 'src'

                exclude '**/LocalPeerManagerImpl.java'
            }
            resources {
                srcDir "../frostwire-common/mp4parser"
                include "**/*.properties"
                exclude "**/*.java"
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "2g"
        jumboMode = true
    }

    signingConfigs {
        release {
            storeFile file("../frostwire-tools/installer_builders/android.keystore/frostwire.keystore")
            storePassword ""
            keyAlias ""
            keyPassword ""
        }
    }

    buildTypes {

        release {
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile 'com.google.re2j:re2j:1.0'
    compile 'io.reactivex:rxandroid:1.0.0'
    compile ('com.android.support:support-v4:22.2.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    compile ('com.google.android.gms:play-services-ads:7.5.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.frostwire:jlibtorrent:1.1.0.4'
    compile 'com.frostwire:jlibtorrent-android:1.1.0.4'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':assembleRelease')) {

        def myKeyAlias = ""
        def myKeyPassword = ""

        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true,
                        title: 'Enter keystore data',
                        alwaysOnTop: true,
                        resizable: true,
                        locationRelativeTo: null,
                        show: true,
                        size: [215, 147]
                ) {
                    vbox {
                        label(text: "Key Alias:")
                        inputAlias = textField()
                        label(text: "Key Password:")
                        inputPassword = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            myKeyAlias = inputAlias.text
                            myKeyPassword = new String(inputPassword.password)
                            dispose();
                        })
                    }
                }
            }
        } else {
            myKeyAlias = System.console().readPassword("\nKey Alias: ")
            myKeyAlias = new String(myKeyAlias)
            myKeyPassword = System.console().readPassword("\nKey Password: ")
            myKeyPassword = new String(myKeyPassword)
        }

        android.signingConfigs.release.keyAlias = myKeyAlias
        android.signingConfigs.release.storePassword = myKeyPassword
        android.signingConfigs.release.keyPassword = myKeyPassword
    }
}
